// Generated by CoffeeScript 1.12.2
(function() {
  var co, config, debugPromiseTimer, newPromiseCached, newPromiseFunction, promiseCache, stackTrace;

  co = require('co');

  config = require('./Config');

  stackTrace = require('stack-trace');

  debugPromiseTimer = null;

  promiseCache = null;

  newPromiseFunction = function(promiseFunction) {
    var filename, hrstart, i, n, result, strTemp, timer, trace, watchdog, watchdogCount;
    if (!config.traceEnabled) {
      return co(promiseFunction);
    }
    trace = stackTrace.get();
    strTemp = "";
    for (n = i = 1; i <= 4; n = ++i) {
      if (n > trace.length) {
        continue;
      }
      if (trace[n] == null) {
        continue;
      }
      if (trace[n].isNative()) {
        continue;
      }
      filename = trace[n].getFileName();
      if (filename == null) {
        filename = "";
      }
      filename = filename.replace("/Users/bpollack/Projects/RiverRock/", "");
      if (n === 1) {
        filename = trace[n].getFunctionName() + "\n" + filename;
      }
      strTemp += filename + ":" + trace[n].getLineNumber() + "\n";
    }
    timer = config.timerStart("newPromise " + strTemp);
    watchdogCount = 0;
    watchdog = setInterval((function(_this) {
      return function() {
        return console.log("Warning: watchdog timer " + (++watchdogCount) + " on promise:", strTemp);
      };
    })(this), 25000);
    hrstart = process.hrtime();
    result = co(function*() {
      var realResult, tempPromise;
      tempPromise = co(promiseFunction);
      realResult = (yield tempPromise);
      timer.log("Complete");
      clearInterval(watchdog);
      return realResult;
    });
    return result;
  };

  newPromiseCached = (function(_this) {
    return function(cacheName, promiseFunction) {
      if (promiseCache === null) {
        promiseCache = {};
      }
      if (promiseCache[cacheName] == null) {
        promiseCache[cacheName] = newPromiseFunction(promiseFunction);
      }
      return promiseCache[cacheName];
    };
  })(this);

  module.exports = newPromiseFunction;

  module.exports.cached = newPromiseCached;

}).call(this);

//# sourceMappingURL=newPromise.js.map
