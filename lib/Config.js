// Generated by CoffeeScript 1.12.7
(function() {
  var EdgeAppConfig, argv, chalk, encrypter, exreport, fs, jsonfile, ninja, numeral, os, path, tty, winston,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  tty = require('tty');

  fs = require('fs');

  argv = require('yargs').argv;

  encrypter = require('object-encrypter');

  jsonfile = require('jsonfile');

  numeral = require('numeral');

  os = require('os');

  winston = require('winston');

  exreport = require('edgecommonexceptionreport');

  ninja = require('ninjadebug');

  path = require('path');

  chalk = null;

  EdgeAppConfig = (function() {
    EdgeAppConfig.prototype.devMode = (process.env.DEVMODE === "true") || false;

    EdgeAppConfig.prototype.traceEnabled = false;

    EdgeAppConfig.prototype.recordIncomingMessages = false;

    EdgeAppConfig.prototype.debugAggregateCalls = !true;

    EdgeAppConfig.prototype.useNinjaDebug = true;

    EdgeAppConfig.prototype.useExceptionReport = true;

    EdgeAppConfig.prototype.WebserverPort = 8001;

    EdgeAppConfig.prototype.WebserverSSLPort = 8443;

    EdgeAppConfig.prototype.mqExchangePathUpdates = "all-updates";

    EdgeAppConfig.prototype.mqExchangeStatusUpdates = "status-updates";

    EdgeAppConfig.prototype.mqItemUpdates = "item-updates";

    EdgeAppConfig.prototype.mqItemUpdatesHigh = "item-updates-high";

    EdgeAppConfig.prototype.mqItemUpdatesLow = "item-updates-low";

    EdgeAppConfig.prototype.mqItemChanges = "item-changes";

    EdgeAppConfig.prototype.mqRetsRawData = "rets-raw";

    EdgeAppConfig.prototype.ConfigPath = ["./Credentials/", "./", process.env.HOME + "/EdgeConfig/", __dirname, __dirname + "/node_modules/edgecommonconfig/EdgeConfig/", __dirname + "/../EdgeConfig/"];

    EdgeAppConfig.prototype.logPath = process.env.HOME + "/EdgeData/logs/";

    EdgeAppConfig.prototype.imagePath = process.env.HOME + "/EdgeData/images/";

    EdgeAppConfig.prototype.importPath = process.env.HOME + "/EdgeData/import/";

    EdgeAppConfig.prototype.ensureExistsSync = function(path) {
      var e;
      try {
        fs.mkdirSync(path);
      } catch (error) {
        e = error;
        if (e.code !== 'EEXIST') {
          return false;
        }
        return true;
      }
      return true;
    };

    EdgeAppConfig.prototype.getDataPath = function(pathName) {
      var i, len, part, ref, strPath;
      strPath = process.env.HOME + "/EdgeData/";
      this.ensureExistsSync(strPath);
      ref = pathName.split("/");
      for (i = 0, len = ref.length; i < len; i++) {
        part = ref[i];
        if (part.indexOf('.') !== -1) {
          return strPath + part;
        }
        strPath += part + "/";
        this.ensureExistsSync(strPath);
      }
      return strPath;
    };

    EdgeAppConfig.prototype.FindFileInPath = function(filename, pathList, returnPath) {
      var e, filenameTest, i, len, pathName, stat;
      if (returnPath == null) {
        returnPath = false;
      }
      if (typeof pathList === "string") {
        pathList = [pathList];
      }
      for (i = 0, len = pathList.length; i < len; i++) {
        pathName = pathList[i];
        try {
          if (pathName == null) {
            continue;
          }
          if (pathName.charAt(pathName.length - 1) !== '/') {
            pathName += '/';
          }
          filenameTest = pathName + filename;
          stat = fs.statSync(filenameTest);
          if ((stat != null) && stat.size && returnPath === false) {
            return filenameTest;
          }
          if ((stat != null) && stat.size && returnPath === true) {
            if (filenameTest.charAt(0) === '/') {
              return path.dirname(filenameTest) + "/";
            }
            return (path.dirname(path.join(process.cwd(), filenameTest))) + '/';
          }
        } catch (error) {
          e = error;
        }
      }
      return null;
    };

    function EdgeAppConfig() {
      this.internalSetupLogger = bind(this.internalSetupLogger, this);
      this.timerStart = bind(this.timerStart, this);
      this.status = bind(this.status, this);
      this.error = bind(this.error, this);
      this.log = bind(this.log, this);
      this.getLogger = bind(this.getLogger, this);
      this.internalGetLoggerFiles = bind(this.internalGetLoggerFiles, this);
      this.internalGetLoggerPapertrail = bind(this.internalGetLoggerPapertrail, this);
      this.internalGetLoggerLogz = bind(this.internalGetLoggerLogz, this);
      this.setCredentials = bind(this.setCredentials, this);
      this.getCredentials = bind(this.getCredentials, this);
      this.setTitle = bind(this.setTitle, this);
      this.reportError = bind(this.reportError, this);
      this.reportException = bind(this.reportException, this);
      this.onExitFunction = bind(this.onExitFunction, this);
      var host, traceLogFile;
      this.argv = argv;
      if (argv.dev != null) {
        this.devMode = true;
      } else {
        this.devMode = false;
      }
      if (argv.trace != null) {
        this.traceEnabled = true;
      }
      this.appRunningName = argv['$0'];
      this.appRunningName = this.appRunningName.replace(/.*\\/, "");
      this.appRunningName = this.appRunningName.replace(".coffee", "");
      this.appRunningName = this.appRunningName.replace("coffee", "");
      this.appRunningName = this.appRunningName.trim();
      this.setTitle(this.appRunningName);
      if (this.traceEnabled) {
        chalk = require('chalk');
        this.log("Launching ", this.appRunningName, " with traceEnabled: ", argv._);
        host = os.hostname();
        traceLogFile = this.getDataPath("logs/" + (this.appRunningName.replace('/', '_')) + "-" + host + "-trace.log");
        this.traceLogFile = new winston.Logger({
          transports: [
            new winston.transports.File({
              level: "info",
              filename: traceLogFile,
              json: true,
              timestamp: false,
              depth: 4,
              tailable: true,
              showLevel: false
            })
          ]
        });
        this.timersRunning = 0;
        this.timersCount = 0;
        this.mainTimer = this.timerStart("Main");
      } else {
        this.mainTimer = null;
      }
      this.startTime = new Date();
      if (require.main.__configTrackingEnabled == null) {
        require.main.__configTrackingEnabled = true;
        process.on('exit', this.onExitFunction);
        process.on('warning', (function(_this) {
          return function(warning) {
            console.warn(warning.name);
            console.warn(warning.message);
            return console.warn(warning.stack);
          };
        })(this));
      }
      this.getCredentials();
      true;
    }

    EdgeAppConfig.prototype.onExitFunction = function(code) {
      var humanize;
      if (this.traceEnabled) {
        humanize = require('humanize-duration');
        console.log("Total duration:", humanize(new Date().getTime() - this.startTime.getTime()));
        console.log("Application exit code=" + code);
      }
      this.setTitle("");
      return true;
    };

    EdgeAppConfig.prototype.reportException = function(message, e) {
      this.internalSetupLogger();
      this.logger.error("Exception", {
        message: message,
        e: e
      });
      this.reportError(message, e);
      return true;
    };

    EdgeAppConfig.prototype.reportError = function(message, e) {
      if (e == null) {
        e = message;
        message = "";
      }
      exreport.reportError.apply(null, [message, e]);
      return false;
    };

    EdgeAppConfig.prototype.setTitle = function(title) {
      if (!Boolean(process.stdout.isTTY)) {
        return;
      }
      if (title === null) {
        process.stdout.write(String.fromCharCode(27) + "]6;1;bg;*;default" + String.fromCharCode(7));
        process.stdout.write(String.fromCharCode(27) + "]2;" + "bash$" + String.fromCharCode(27) + '\\');
      } else {
        process.stdout.write(String.fromCharCode(27) + "]0;" + title + String.fromCharCode(7));
        process.stdout.write(String.fromCharCode(27) + "]2;" + title + String.fromCharCode(27) + '\\');
      }
      this.appTitle = title;
      return true;
    };

    EdgeAppConfig.prototype.reportDatabaseError = function(name, action, document, e) {
      this.internalSetupLogger();
      this.logger.error("Database error", {
        name: name,
        action: action,
        document: document,
        error: e
      });
      chalk = require('chalk');
      console.info("--> Database Error");
      console.info(chalk.blue("DataSet   :" + chalk.yellow(name)));
      console.info(chalk.blue("Action    :" + chalk.yellow(action)));
      console.info(chalk.blue("Document  :" + JSON.stringify(document)));
      console.info(chalk.blue("Exception :" + chalk.green(e.toString())));
      return false;
    };

    EdgeAppConfig.prototype.getCredentials = function(serverCode) {
      var configFile, engine, hex, jsonText, jsonTextFile, key, ref, value, varName;
      if ((serverCode != null) && (module.exports[serverCode] != null)) {
        return module.exports[serverCode];
      }
      if (this.__credentials == null) {
        configFile = this.FindFileInPath("key.txt", this.ConfigPath);
        if (configFile == null) {
          console.log("Error:  Unable to find key.txt in ", this.ConfigPath);
          return null;
        }
        key = fs.readFileSync(configFile);
        key = key.toString();
        engine = encrypter(key);
        if (this.devMode) {
          jsonTextFile = "credentials_dev.json";
        } else {
          jsonTextFile = "credentials.json";
        }
        configFile = this.FindFileInPath(jsonTextFile, this.ConfigPath);
        if (configFile == null) {
          console.log("Error:  Unable to find " + jsonTextFile + " in ", this.ConfigPath);
          return null;
        }
        jsonText = fs.readFileSync(configFile);
        hex = JSON.parse(jsonText);
        this.__credentials = engine.decrypt(hex);
      }
      if (serverCode == null) {
        ref = this.__credentials;
        for (varName in ref) {
          value = ref[varName];
          this[varName] = value;
        }
        return;
      }
      if (this.__credentials[serverCode] == null) {
        if (serverCode !== "papertrail") {
          console.error("Warning: requested credentials to unknown site " + serverCode);
          return null;
        }
      }
      return this.__credentials[serverCode];
    };

    EdgeAppConfig.prototype.setCredentials = function(serverName, object) {
      this.getCredentials(serverName);
      this.__credentials[serverName] = object;
    };

    EdgeAppConfig.prototype.internalGetLoggerLogz = function(name) {
      var consoleLevel, logzio, logzioWinstonTransport, transportList;
      this.status("Setting up Logz.io for logging");
      logzio = this.getCredentials("logzio");
      logzioWinstonTransport = require('winston-logzio');
      consoleLevel = "log";
      if (this.traceEnabled) {
        consoleLevel = "error";
      }
      transportList = {
        transports: [
          new winston.transports.Console({
            level: consoleLevel,
            colorize: true,
            prettyPrint: true,
            depth: 4,
            timestamp: true,
            showLevel: false
          }), new logzioWinstonTransport({
            token: logzio,
            level: "error",
            name: name
          })
        ],
        exitOnError: false
      };
      console.log("Adding LOGGER:", transportList);
      this.__logs[name] = new winston.Logger(transportList);
      return true;
    };

    EdgeAppConfig.prototype.internalGetLoggerPapertrail = function(name) {
      return true;
    };

    EdgeAppConfig.prototype.internalGetLoggerFiles = function(name) {
      var e, errorLogFile, host, infoLogFile, transportList;
      host = os.hostname();
      infoLogFile = this.getDataPath("logs/" + name + "-" + host + "-info.log");
      errorLogFile = this.getDataPath("logs/" + name + "-" + host + "-error.log");
      try {
        transportList = {
          transports: [
            new winston.transports.Console({
              level: consoleLevel,
              colorize: true,
              prettyPrint: true,
              depth: 4,
              timestamp: true,
              showLevel: false
            }), new winston.transports.File({
              name: "info",
              level: "info",
              filename: infoLogFile,
              json: true,
              timestamp: true,
              maxsize: 1024 * 1024 * 40,
              maxFiles: 10,
              depth: 4,
              tailable: true,
              zippedArchive: true,
              showLevel: false
            }), new winston.transports.File({
              name: "error",
              level: "error",
              filename: errorLogFile,
              json: true,
              timestamp: true,
              maxsize: 1024 * 1024 * 40,
              maxFiles: 10,
              depth: 4,
              tailable: true,
              zippedArchive: true,
              showLevel: false
            })
          ],
          exitOnError: false
        };
        this.__logs[name] = new winston.Logger(transportList);
      } catch (error) {
        e = error;
        console.log("Logger error:", e);
      }
      return true;
    };

    EdgeAppConfig.prototype.getLogger = function(name) {
      var consoleLevel, logzio, paperTrailConfig;
      if (this.__logs == null) {
        this.__logs = {};
      }
      consoleLevel = "log";
      if (this.traceEnabled) {
        consoleLevel = "error";
      }
      if (this.__logs[name] == null) {
        logzio = this.getCredentials("logzio");
        paperTrailConfig = this.getCredentials("papertrail");
        if (logzio != null) {
          this.internalGetLoggerLogz(name);
        } else if (paperTrailConfig != null) {
          this.internalGetLoggerPapertrail(name);
        } else {
          this.internalGetLoggerFiles(name);
        }
      }
      return this.__logs[name];
    };

    EdgeAppConfig.prototype.dump = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ninja.dump.apply(ninja, args);
    };

    EdgeAppConfig.prototype.log = function() {
      var message;
      message = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log.apply(null, message);
    };

    EdgeAppConfig.prototype.info = function() {
      var args, ignoreException;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      try {
        this.internalSetupLogger();
        this.logger.info.apply(this.logger, args);
      } catch (error) {
        ignoreException = error;
        console.log("IGNORED MESSAGE:", ignoreException);
      }
      return true;
    };

    EdgeAppConfig.prototype.error = function() {
      var args, ignoreException;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      try {
        this.internalSetupLogger();
        this.logger.error.apply(this.logger, args);
      } catch (error) {
        ignoreException = error;
        console.log("IGNORED MESSAGE:", ignoreException);
      }
      return true;
    };

    EdgeAppConfig.prototype.status = function() {
      var e, message;
      message = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      try {
        if (this.mainTimer != null) {
          this.mainTimer.status.apply(this.mainTimer, message);
        }
      } catch (error) {
        e = error;
        console.log("Status error:", e);
      }
      return true;
    };

    EdgeAppConfig.prototype.timerStart = function(name) {
      var data;
      if (!this.traceEnabled) {
        data = {};
        data.log = function() {
          return false;
        };
        data.status = function() {
          return false;
        };
        return data;
      }
      data = {};
      data.name = name;
      data.lastTime = process.hrtime();
      data.totalTime = 0;
      data.lastStatus = "Starting " + name;
      data.timerNumber = this.timersCount++;
      data.traceLogFile = this.traceLogFile;
      data.log = function(status) {
        var diff, ms, ns, segment, segmentms, segmentns;
        diff = process.hrtime(this.start);
        ns = diff[0] * 1e9 + diff[1];
        ms = ns / 1e6;
        if (status == null) {
          status = "Undefined status";
        }
        segment = process.hrtime(this.lastTime);
        segmentns = segment[0] * 1e9 + segment[1];
        segmentms = segmentns / 1e6;
        this.totalTime = this.totalTime + segmentms;
        this.traceLogFile.info({
          timer: name,
          segmentms: segmentms,
          totalms: this.totalTime,
          timer_id: this.timerNumber,
          lastCall: this.lastStatus,
          thisCall: status
        });
        this.lastStatus = status;
        this.lastTime = process.hrtime();
        return segmentms;
      };
      data.status = function() {
        var i, len, obj, segmentms, status, statusAll, str;
        statusAll = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if ((statusAll != null) && statusAll.length === 1 && typeof statusAll[0] === "string") {
          status = statusAll[0];
        } else {
          status = "";
          for (i = 0, len = statusAll.length; i < len; i++) {
            obj = statusAll[i];
            if (typeof obj === "string") {
              status = status + obj;
            } else {
              status = status + ninja.dumpVar(obj, "");
            }
          }
        }
        segmentms = this.log(status);
        str = "";
        if (segmentms > 5000) {
          str = "[" + ninja.pad(segmentms / 1000, 13, chalk.red) + " sec] ";
        } else if (segmentms > 1000) {
          str = "[" + ninja.pad(segmentms / 1000, 13, chalk.yellow) + " sec] ";
        } else {
          str = "[" + ninja.pad(segmentms, 14) + " ms] ";
        }
        return console.log(str + " " + name + " | " + status);
      };
      return data;
      return true;
    };

    EdgeAppConfig.prototype.internalSetupLogger = function() {
      var appName, paperTrailConfig, paperTrailLogger;
      if (this.logger != null) {
        return;
      }
      paperTrailConfig = this.getCredentials("papertrail");
      if (paperTrailConfig != null) {
        require('winston-papertrail').Papertrail;
        paperTrailConfig.level = 'error';
        paperTrailLogger = new winston.transports.Papertrail(paperTrailConfig);
        exreport.winston = new winston.Logger({
          transports: [paperTrailLogger]
        });
      }
      appName = this.appRunningName.replace('/', '_');
      this.logger = this.getLogger(appName);
      return true;
    };

    return EdgeAppConfig;

  })();

  module.exports = new EdgeAppConfig();

}).call(this);

//# sourceMappingURL=Config.js.map
